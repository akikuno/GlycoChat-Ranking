---
title: "Glycan Specificity Analysis in the PDAC Dataset"
author: "Akihiro Kuno"
date: "2025-04-18"
format:
    html:
        toc: true
        code-fold: true
---


```{r import-libraries}
library(Seurat)
library(tidyverse)
```

```{r load-data}
load("data/pdac_ctype.RData")
```

## Expression Specificity Functions

```{r specificity-functions}

# Calculate mean expression/glycan per cell type
calculate_mean_by_celltype <- function(values) {
    cell_types <- names(values)
    tapply(values, cell_types, mean, na.rm = TRUE)
}

# Calculate a specificity score emphasizing single-cell type expression
calculate_specificity <- function(values_by_celltype) {
    # Basic coefficient of variation
    cv <- sd(values_by_celltype, na.rm = TRUE) / mean(values_by_celltype, na.rm = TRUE)

    sorted_values <- sort(values_by_celltype, decreasing = TRUE, na.last = TRUE)

    # Calculate the ratio of the maximum value to the second highest value
    max_to_second <- if (length(sorted_values) >= 2 && sorted_values[2] > 0) {
        sorted_values[1] / sorted_values[2]
    } else if (sorted_values[1] == 0 || is.na(sorted_values[1])) {
        1
    } else {
        Inf
    }

    return(cv * (0.3 + 0.7 * min(max_to_second / 5, 1)))
}

# Specificity within immune cell types only
calculate_immune_specificity <- function(values_by_celltype, immune_cells) {
    immune_values <- values_by_celltype[immune_cells]
    return(calculate_specificity(immune_values))
}

# Specificity within cancer cell types only
calculate_cancer_specificity <- function(values_by_celltype, cancer_cells) {
    cancer_values <- values_by_celltype[cancer_cells]
    return(calculate_specificity(cancer_values))
}

# Identify the top expressing/glycan cell type and specificity ratio
identify_top_cell_type <- function(values_by_celltype) {
    # Extract values without NA
    valid_values <- values_by_celltype[!is.na(values_by_celltype)]

    # If no valid values exist
    if (length(valid_values) == 0) {
        return(list(
            top_cell_type = "None",
            max_value = 0,
            max_to_second_ratio = 0
        ))
    }
    # Cell type with the maximum value
    max_cell_type <- names(values_by_celltype)[which.max(values_by_celltype)]
    max_value <- max(values_by_celltype, na.rm = TRUE)

    # Ratio to the second highest value
    sorted_values <- sort(values_by_celltype, decreasing = TRUE, na.last = TRUE)
    if (length(sorted_values) >= 2 && !is.na(sorted_values[2])) {
        max_to_second_ratio <- max_value / sorted_values[2]
    } else {
        max_to_second_ratio <- Inf
    }

    return(list(
        top_cell_type = max_cell_type,
        max_value = max_value,
        max_to_second_ratio = max_to_second_ratio
    ))
}
```

## Define Functions to Calculate RNA Expression and Glycan glycan Scores

```{r scoreing}

# RNA score calculation for immune cells
calculate_rna_scores <- function(gene_vec, cell_types, immune_cells) {

    # Calculate the specificy of expression level for immune cells
    expr_by_type <- calculate_mean_by_celltype(gene_vec)
    spec_score <- calculate_immune_specificity(expr_by_type, immune_cells)

    # Calculate the mean expression level for immune cells
    immune_values <- gene_vec[cell_types %in% immune_cells]
    expr_score <- log1p(mean(immune_values, na.rm = TRUE))

    return(list(spec_score = spec_score, expr_score = expr_score))
}

# Glycan score calculation for cancer cells
calculate_glycan_scores <- function(glycan_vec, cell_types, cancer_cells) {

    # Calculate the specificy of glycan level for cancer cells
    glycan_by_type <- calculate_mean_by_celltype(glycan_vec)
    spec_score <- calculate_cancer_specificity(glycan_by_type, cancer_cells)

    # Calculate the mean glycan level for cancer cells
    cancer_values <- glycan_vec[cell_types %in% cancer_cells]
    glycan_score <- log1p(mean(cancer_values, na.rm = TRUE))
    return(list(spec_score = spec_score, glycan_score = glycan_score, by_celltype = glycan_by_type))
}
```

## Glycan Ranking Function

```{r glycan-ranking}
# Normalize vector to 0–1
min_max_normalize <- function(x) {
    rng <- range(x, na.rm = TRUE)
    if (rng[1] == rng[2]) return(rep(0.5, length(x)))
    (x - rng[1]) / (rng[2] - rng[1])
}

# Main function: Score Glycans
score_glycans <- function(seurat_obj, cancer_cells, immune_cells, glycan_gene_mapping, weight_rna_specificity = 9, weight_rna_level = 7, weight_glycan_specificity = 6, weight_glycan_level = 7) {

    # Get cell type information
    cell_types <- as.character(Idents(seurat_obj))

    # Get data
    rna_data <- seurat_obj[["RNA"]]$data
    glycan_data <- seurat_obj[["glycan"]]$data
    glycan_list <- rownames(glycan_data)

    # Data frame to store results
    results <- data.frame(
        glycan = glycan_list,
        rna_specificity_score = 0,
        rna_expression_score = 0,
        glycan_specificity_score = 0,
        glycan_binding_score = 0,
        total_score = 0,
        top_cancer_cell_type_glycan = "",
        top_immune_cell_type_rna = "",
        stringsAsFactors = FALSE
    )

    # Calculate scores for each glycan
    for (i in seq_along(glycan_list)) {
        glycan <- glycan_list[i]
        # Get glycan glycan data
        glycan_glycan <- glycan_data[glycan, ]
        names(glycan_glycan) <- cell_types
        # Calculate glycan glycan by cell type
        glycan_by_celltype <- calculate_mean_by_celltype(glycan_glycan)

        # Identify the cell type with the highest glycan
        top_glycan_info <- identify_top_cell_type(glycan_by_celltype[cancer_cells])

        # Calculate glycan scores
        glycan_scores <- calculate_glycan_scores(glycan_glycan, cell_types, cancer_cells)

        # Calculate RNA expression scores for the corresponding gene
        gene_for_glycan <- glycan_gene_mapping[[glycan]] # Replace with actual mapping
        top_rna_info <- list(top_cell_type = NA, max_to_second_ratio = NA)

        # Check if the corresponding gene exists in the RNA assay
        if (gene_for_glycan %in% rownames(rna_data)) {
            gene_expr <- rna_data[gene_for_glycan, ]
            names(gene_expr) <- cell_types
            # Calculate gene expression by cell type
            expr_by_celltype <- calculate_mean_by_celltype(gene_expr)

            # Identify the cell type with the highest expression
            top_rna_info <- identify_top_cell_type(expr_by_celltype[immune_cells])

            rna_scores <- calculate_rna_scores(gene_expr, cell_types, immune_cells)

            results$rna_specificity_score[i] <- rna_scores$spec_score
            results$rna_expression_score[i] <- rna_scores$expr_score
        }

        # Store glycan scores
        results$glycan_specificity_score[i] <- glycan_scores$spec_score
        results$glycan_binding_score[i] <- glycan_scores$glycan_score

        # Store single-cell type specificity information
        results$top_cancer_cell_type_glycan[i] <- top_glycan_info$top_cell_type
        results$top_immune_cell_type_rna[i] <- ifelse(is.na(top_rna_info$top_cell_type), "", top_rna_info$top_cell_type)

        results$total_score[i] <-
            results$rna_specificity_score[i] +
            results$rna_expression_score[i] +
            results$glycan_specificity_score[i] +
            results$glycan_binding_score[i]
    }

    # Normalize each component score using min-max normalization
    results <- results %>%
        mutate(
            rna_specificity_score = min_max_normalize(rna_specificity_score),
            rna_expression_score = min_max_normalize(rna_expression_score),
            glycan_specificity_score = min_max_normalize(glycan_specificity_score),
            glycan_binding_score = min_max_normalize(glycan_binding_score)
        )

    # Recalculate total_score using normalized scores and weights
    weights <- c(rna_spec = weight_rna_specificity, rna_expr = weight_rna_level, glycan_spec = weight_glycan_specificity, glycan_glycan = weight_glycan_level)
    weights <- weights / sum(weights)

    results$total_score <-
        weights["rna_spec"] * results$rna_specificity_score +
        weights["rna_expr"] * results$rna_expression_score +
        weights["glycan_spec"] * results$glycan_specificity_score +
        weights["glycan_glycan"] * results$glycan_binding_score

    # Sort by total score in descending order
    results <- results %>% arrange(desc(total_score))

    return(results)
}
```

```{r plot}
# Bar plot of component scores for top glycans
plot_top_glycans <- function(glycan_ranking, n = 10) {
    n <- min(n, nrow(glycan_ranking))
    top_n <- head(glycan_ranking, n)

    top_long <- top_n %>%
        select(glycan, rna_specificity_score, rna_expression_score, glycan_specificity_score, glycan_binding_score) %>%
        pivot_longer(cols = -glycan, names_to = "score_type", values_to = "score")

    ggplot(top_long, aes(x = reorder(glycan, -score, sum), y = score, fill = score_type)) +
        geom_bar(stat = "identity") +
        theme_minimal() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
        labs(title = paste("Top", n, "Glycans Scoring Breakdown"),
            x = "Glycan", y = "Score", fill = "Score Component") +
        scale_fill_brewer(palette = "Set2",
                        labels = c("Glycan glycan Level", "Glycan Cell Specificity",
                        "RNA Expression Level", "RNA Cell Specificity"))
}
```


## Execute Ranking

```{r ranking-setup}
# Classification of cell types (adjust according to actual data)
cancer_cells <- c("Classical", "Basal-like", "Intermediate")

immune_cells <- c("Naïve CD4+Tcell", "Effector/Memory CD4+Tcell", "Effector/Memory CD8+Tcell", "Exhausted CD8+Tcell", "M1-like TAM", "M2-like TAM", "MDSC", "cDC2", "B-cell", "pDC", "Mast cell", "Endothelial cell", "myCAF", "iCAF")

glycan_gene_mapping <- c(
    "ASGR1.1" = "ASGR1",
    "ASGR2.1" = "ASGR2",
    "Langerin" = "CD207",
    "Prolectin" = "CLEC17A",
    "LSECtin" = "CLEC4G",
    "DCSIGNR" = "CD209L",
    "MINCLE" = "CLEC4E",
    "DCIR" = "CLEC4A",
    "Dectin1" = "CLEC7A",
    "Dectin2" = "CLEC6A",
    "Dectin3" = "CLEC4D",
    "MDL1" = "CLEC5A",
    "CD301" = "CLEC10A",
    "DCAL2" = "CLEC12A",
    "CD370" = "CLEC9A",
    "LOX1" = "OLR1",
    "CLEC2" = "CLEC1B",
    "MRC1.1" = "MRC1",
    "CLEC2D.1" = "CLEC2D",
    "L-Selectin" = "SELL",
    "P-Selectin" = "SELP",
    "E-Selectin" = "SELE",
    "ACE2.1" = "ACE2",
    "Neuropilin-1" = "NRP1"
)
```

```{r ranking-execute}
# Execute ranking
glycan_ranking <- score_glycans(total5, cancer_cells, immune_cells, glycan_gene_mapping,
    weight_rna_specificity = 9, weight_rna_level = 1, weight_glycan_specificity = 5, weight_glycan_level = 6)

# Display top 10 glycans
head(glycan_ranking, 10)

glycan_ranking %>% write.csv("data/glycan_ranking.csv", row.names = FALSE)
```

## Visualization

```{r ranking-plot}
# Visualize score breakdown
g_plot <- plot_top_glycans(glycan_ranking, 10)
ggsave(g_plot, filename="data/glycan_ranking_top10.png", width = 10, height = 6, dpi = 300)
```


```{r export-to-r}
knitr::purl("immune_checkpoint_lectin_ranking.qmd")
```
